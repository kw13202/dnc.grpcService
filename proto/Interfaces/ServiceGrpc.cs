// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: service.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Dnc.GrpcService.Protocol {
  public static partial class HolidayService
  {
    static readonly string __ServiceName = "dnc.grpcService.protocol.HolidayService";

    static readonly grpc::Marshaller<global::Dnc.GrpcService.Protocol.GetHolidaysReq> __Marshaller_GetHolidaysReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Dnc.GrpcService.Protocol.GetHolidaysReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Dnc.GrpcService.Protocol.GetHolidaysRsp> __Marshaller_GetHolidaysRsp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Dnc.GrpcService.Protocol.GetHolidaysRsp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Dnc.GrpcService.Protocol.AddHolidaysReq> __Marshaller_AddHolidaysReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Dnc.GrpcService.Protocol.AddHolidaysReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Dnc.GrpcService.Protocol.AddHolidaysRsp> __Marshaller_AddHolidaysRsp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Dnc.GrpcService.Protocol.AddHolidaysRsp.Parser.ParseFrom);

    static readonly grpc::Method<global::Dnc.GrpcService.Protocol.GetHolidaysReq, global::Dnc.GrpcService.Protocol.GetHolidaysRsp> __Method_GetHolidays = new grpc::Method<global::Dnc.GrpcService.Protocol.GetHolidaysReq, global::Dnc.GrpcService.Protocol.GetHolidaysRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHolidays",
        __Marshaller_GetHolidaysReq,
        __Marshaller_GetHolidaysRsp);

    static readonly grpc::Method<global::Dnc.GrpcService.Protocol.AddHolidaysReq, global::Dnc.GrpcService.Protocol.AddHolidaysRsp> __Method_AddHolidays = new grpc::Method<global::Dnc.GrpcService.Protocol.AddHolidaysReq, global::Dnc.GrpcService.Protocol.AddHolidaysRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddHolidays",
        __Marshaller_AddHolidaysReq,
        __Marshaller_AddHolidaysRsp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Dnc.GrpcService.Protocol.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of HolidayService</summary>
    public abstract partial class HolidayServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Dnc.GrpcService.Protocol.GetHolidaysRsp> GetHolidays(global::Dnc.GrpcService.Protocol.GetHolidaysReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Dnc.GrpcService.Protocol.AddHolidaysRsp> AddHolidays(global::Dnc.GrpcService.Protocol.AddHolidaysReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HolidayService</summary>
    public partial class HolidayServiceClient : grpc::ClientBase<HolidayServiceClient>
    {
      /// <summary>Creates a new client for HolidayService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HolidayServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HolidayService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HolidayServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HolidayServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HolidayServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Dnc.GrpcService.Protocol.GetHolidaysRsp GetHolidays(global::Dnc.GrpcService.Protocol.GetHolidaysReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHolidays(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Dnc.GrpcService.Protocol.GetHolidaysRsp GetHolidays(global::Dnc.GrpcService.Protocol.GetHolidaysReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHolidays, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Dnc.GrpcService.Protocol.GetHolidaysRsp> GetHolidaysAsync(global::Dnc.GrpcService.Protocol.GetHolidaysReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHolidaysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Dnc.GrpcService.Protocol.GetHolidaysRsp> GetHolidaysAsync(global::Dnc.GrpcService.Protocol.GetHolidaysReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHolidays, null, options, request);
      }
      public virtual global::Dnc.GrpcService.Protocol.AddHolidaysRsp AddHolidays(global::Dnc.GrpcService.Protocol.AddHolidaysReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddHolidays(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Dnc.GrpcService.Protocol.AddHolidaysRsp AddHolidays(global::Dnc.GrpcService.Protocol.AddHolidaysReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddHolidays, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Dnc.GrpcService.Protocol.AddHolidaysRsp> AddHolidaysAsync(global::Dnc.GrpcService.Protocol.AddHolidaysReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddHolidaysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Dnc.GrpcService.Protocol.AddHolidaysRsp> AddHolidaysAsync(global::Dnc.GrpcService.Protocol.AddHolidaysReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddHolidays, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HolidayServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HolidayServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HolidayServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetHolidays, serviceImpl.GetHolidays)
          .AddMethod(__Method_AddHolidays, serviceImpl.AddHolidays).Build();
    }

  }
}
#endregion
